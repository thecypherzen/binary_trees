#include <stdlib.h>
#include <stdio.h>
#include "binary_trees.h"

/**
 * launch_test - Test ancestor function and print informations
 *
 * @n1: First node
 * @n2: Second node
 */
void launch_test(binary_tree_t *n1, binary_tree_t *n2)
{
    binary_tree_t *ancestor;

    ancestor = binary_trees_ancestor(n1, n2);
	if (!ancestor)
	{
		printf("Ancestor of NULL: (nill)\n");
		return;
	}
    printf("Ancestor of [%d] & [%d]: ", n1->n, n2->n);
    printf("%d\n", ancestor->n);
}

/**
 * main - Entry point
 *
 * Return: Always 0 (Success)
 */
int main(void)
{
    binary_tree_t *root;

    root = binary_tree_node(NULL, 98);
    root->left = binary_tree_node(root, 12);
    root->right = binary_tree_node(root, 402);
    root->left->right = binary_tree_node(root->left, 54);
    root->right->right = binary_tree_node(root->right, 128);
    root->left->left = binary_tree_node(root->left, 10);
    root->right->left = binary_tree_node(root->right, 45);
    root->right->right->left = binary_tree_node(root->right->right, 92);
    root->right->right->right = binary_tree_node(root->right->right, 65);
	binary_tree_insert_left(root->left->left, 102);
	binary_tree_insert_right(root->left->left, 48);
	binary_tree_insert_left(root->left->right, 99);
	binary_tree_insert_right(root->left->right, 100);
	binary_tree_insert_left(root->right->left, 14);
	binary_tree_insert_right(root->right->left, 15);
	binary_tree_insert_left(root->right->left->left, 17);
	binary_tree_insert_right(root->right->left->left, 18);
    binary_tree_print(root);

    launch_test(root->right, root->left);
    launch_test(root->right->right->right, root->right->left);
    launch_test(root->right->right->right, root->right->right);
	launch_test(root->right->right, root->right->right);
	launch_test(root->left->left, root->left->right);
    return (0);
}
